defmodule SICP.Ch1.Ex14 do
  @moduledoc """
  Task:

  Draw the tree illustrating the process generated by the count-change procedure
  of sectionÂ 1.2.2 in making change for 11 cents. What are the orders of growth
  of the space and number of steps used by this process as the amount to be
  changed increases?

  Answer:

  ```elixir
  cc(11, 5)
  cc(11, 4) + cc(-39, 5)
  cc(11, 3) + cc(-14, 4) + 0
  cc(11, 2) + cc(1, 3) + 0 + 0
  cc(11, 2) + cc(1, 2) + cc(-9, 3) + 0 + 0
  cc(11, 2) + cc(1, 1) + cc(-4, 2) + 0 + 0 + 0
  cc(11, 2) + cc(1, 0) + cc(0, 1) + 0 + 0 + 0 + 0
  cc(11, 2) + 0 + 1 + 0 + 0 + 0 + 0

  # fold values:
  cc(11, 2) + 1
  cc(11, 1) + cc(6, 2) + 1
  cc(11, 1) + cc(6, 1) + cc(1, 2) + 1
  cc(11, 1) + cc(6, 1) + cc(1, 1) + cc(-4, 1) + 1
  cc(11, 1) + cc(6, 1) + cc(1, 0) + cc(0, 1) + 0 + 1
  cc(11, 1) + cc(6, 1) + 0 + 1 + 0 + 1

  # fold values:
  cc(11, 1) + cc(6, 0) + cc(5, 1) + 2
  cc(11, 1) + 0 + cc(5, 0) + cc(4, 1) + 2
  cc(11, 1) + 0 + 0 + cc(4, 0) + cc(3, 1) + 2
  cc(11, 1) + 0 + 0 + 0 + cc(3, 0) + cc(2, 1) + 2
  cc(11, 1) + 0 + 0 + 0 + 0 + cc(2, 0) + cc(1, 1) + 2
  cc(11, 1) + 0 + 0 + 0 + 0 + 0 + cc(1, 0) + cc(0, 1) + 2
  cc(11, 1) + 0 + 0 + 0 + 0 + 0 + 0 + 1 + 2

  # fold values:
  cc(11, 1) + 3
  cc(11, 0) + cc(10, 1) + 3
  0 + cc(10, 0) + cc(9, 1) + 3
  0 + 0 + cc(9, 0) + cc(8, 1) + 3
  0 + 0 + 0 + cc(8, 0) + cc(7, 1) + 3
  0 + 0 + 0 + 0 + cc(7, 0) + cc(6, 1) + 3
  0 + 0 + 0 + 0 + 0 + cc(6, 0) + cc(5, 1) + 3
  0 + 0 + 0 + 0 + 0 + 0 + cc(5, 0) + cc(4, 1) + 3
  0 + 0 + 0 + 0 + 0 + 0 + 0 + cc(4, 0) + cc(3, 1) + 3
  0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + cc(3, 0) + cc(2, 1) + 3
  0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + cc(2, 0) + cc(1, 1) + 3
  0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + cc(1, 0) + cc(0, 1) + 3
  0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1 + 3
  4
  ```

  Orders of growth

    Steps:
      1 coin {1} -> O(n) where n - number of coins
      2 coins {1, 5} -> O(n^2) where n - number of coins
      3 coins {1, 5, 10} -> O(n^3) where n - number of coins
      k coin types -> O(n^k) where n - number of coins

    Space:
      approximately O(n + k) where
        n - number of coins
        k - number of coin types
  """

  @spec count_change(integer) :: non_neg_integer
  def count_change(amount), do: cc(amount, 5)

  @spec cc(integer(), pos_integer()) :: non_neg_integer()
  defp cc(amount, kinds_of_coins)

  defp cc(0, _), do: 1
  defp cc(amount, kinds_of_coins) when amount < 0 or kinds_of_coins == 0, do: 0

  defp cc(amount, kinds_of_coins) do
    cc(amount, kinds_of_coins - 1) +
      cc(amount - first_denomination(kinds_of_coins), kinds_of_coins)
  end

  @spec first_denomination(pos_integer()) :: pos_integer()
  defp first_denomination(kinds_of_coins) do
    case kinds_of_coins do
      1 -> 1
      2 -> 5
      3 -> 10
      4 -> 25
      5 -> 50
    end
  end
end
